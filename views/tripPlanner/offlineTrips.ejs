<% layout("/layouts/boilerplate") %>

<div class="magical-bg-wrapper">
<div class="container mt-4">
    <div class="row">
        <div class="col-12">
            <div class="trips-header mb-4">
                <div class="d-flex align-items-center justify-content-between">
                    <div>
                        <h2 class="mb-1">
                            <i class="fa-solid fa-wifi-slash text-warning me-2"></i>
                            Offline Trips
                        </h2>
                        <p class="text-muted mb-0">Your downloaded trips for offline access</p>
                    </div>
                    <div class="d-flex gap-2">
                        <button class="btn btn-outline-primary" id="syncBtn">
                            <i class="fa-solid fa-sync me-1"></i>
                            Sync Changes
                        </button>
                        <a href="/trip-planner/my-trips" class="btn btn-primary">
                            <i class="fa-solid fa-suitcase-rolling me-1"></i>
                            All Trips
                        </a>
                    </div>
                </div>
            </div>

            <!-- Loading State -->
            <div id="loadingState" class="text-center py-5">
                <div class="loading-animation">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <div class="mt-3">
                        <p class="text-muted">Loading offline trips...</p>
                    </div>
                </div>
            </div>

            <!-- Offline Trips Container -->
            <div id="offlineTripsContainer" class="row" style="display: none;">
                <!-- Trips will be populated here -->
            </div>

            <!-- Empty State -->
            <div id="emptyState" class="text-center py-5" style="display: none;">
                <div class="empty-icon mb-4">
                    <i class="fa-solid fa-wifi-slash fa-4x text-muted"></i>
                </div>
                <h4 class="text-muted mb-3">No Offline Trips Yet</h4>
                <p class="text-muted mb-4">
                    Download trips from your trip list to access them offline.
                </p>
                <div class="empty-actions">
                    <a href="/trip-planner/my-trips" class="btn btn-primary">
                        <i class="fa-solid fa-suitcase-rolling me-2"></i>
                        Browse Trip Plans
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Wait for OfflineManager to be available
    waitForOfflineManager().then(() => {
        loadOfflineTrips();

        // Sync button functionality
        document.getElementById('syncBtn').addEventListener('click', function() {
            syncOfflineChanges();
        });

        // Add event listeners for PDF actions
        setupPdfEventListeners();
    });
});

// Function to set up event listeners for PDF actions
function setupPdfEventListeners() {
    // View PDF buttons
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('view-pdf-btn') || e.target.closest('.view-pdf-btn')) {
            e.preventDefault();
            const btn = e.target.classList.contains('view-pdf-btn') ? e.target : e.target.closest('.view-pdf-btn');
            const tripId = btn.getAttribute('data-trip-id');
            if (tripId) {
                viewPdf(tripId);
            }
        }
    });

    // Download PDF buttons
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('download-pdf-btn') || e.target.closest('.download-pdf-btn')) {
            e.preventDefault();
            const btn = e.target.classList.contains('download-pdf-btn') ? e.target : e.target.closest('.download-pdf-btn');
            const tripId = btn.getAttribute('data-trip-id');
            if (tripId) {
                downloadPdf(tripId);
            }
        }
    });

    // Delete PDF buttons
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('delete-pdf-btn') || e.target.closest('.delete-pdf-btn')) {
            e.preventDefault();
            const btn = e.target.classList.contains('delete-pdf-btn') ? e.target : e.target.closest('.delete-pdf-btn');
            const tripId = btn.getAttribute('data-trip-id');
            if (tripId) {
                deletePdf(tripId);
            }
        }
    });
}

// Function to wait for OfflineManager to be initialized
function waitForOfflineManager() {
    return new Promise((resolve) => {
        const checkOfflineManager = () => {
            if (window.OfflineManager) {
                resolve();
            } else {
                setTimeout(checkOfflineManager, 100);
            }
        };
        checkOfflineManager();
    });
}

async function loadOfflineTrips() {
    const loadingState = document.getElementById('loadingState');
    const container = document.getElementById('offlineTripsContainer');
    const emptyState = document.getElementById('emptyState');

    try {
        if (window.OfflineManager) {
            const trips = await window.OfflineManager.getStoredPdfs();

            loadingState.style.display = 'none';

            if (trips && trips.length > 0) {
                container.style.display = 'block';
                container.innerHTML = '';

                trips.forEach(trip => {
                    const tripCard = createTripCard(trip);
                    container.appendChild(tripCard);
                });
            } else {
                emptyState.style.display = 'block';
            }
        } else {
            throw new Error('Offline functionality not available');
        }
    } catch (error) {
        console.error('Error loading offline trips:', error);
        loadingState.style.display = 'none';
        emptyState.style.display = 'block';
        showToast('Failed to load offline trips', 'error');
    }
}

function createTripCard(trip) {
    const col = document.createElement('div');
    col.className = 'col-md-6 col-lg-4 mb-4';

    col.innerHTML = `
        <div class="card h-100 shadow-sm">
            <div class="card-body d-flex flex-column">
                <div class="d-flex align-items-start justify-content-between mb-3">
                    <div>
                        <h5 class="card-title mb-1">
                            <i class="fa-solid fa-file-pdf text-danger me-2"></i>
                            ${trip.destination || 'Trip Plan'}
                        </h5>
                        <small class="text-muted">
                            Downloaded: ${new Date(trip.downloadedAt).toLocaleDateString()}
                        </small>
                    </div>
                    <div class="dropdown">
                        <button class="btn btn-sm btn-outline-secondary dropdown-toggle" type="button" data-bs-toggle="dropdown">
                            <i class="fa-solid fa-ellipsis-v"></i>
                        </button>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item view-pdf-btn" href="#" data-trip-id="${trip.id}">
                                <i class="fa-solid fa-eye me-2"></i>View PDF
                            </a></li>
                            <li><a class="dropdown-item download-pdf-btn" href="#" data-trip-id="${trip.id}">
                                <i class="fa-solid fa-download me-2"></i>Download Again
                            </a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item text-danger delete-pdf-btn" href="#" data-trip-id="${trip.id}">
                                <i class="fa-solid fa-trash me-2"></i>Delete
                            </a></li>
                        </ul>
                    </div>
                </div>

                <div class="card-text flex-grow-1">
                    <div class="row text-center">
                        <div class="col-6">
                            <small class="text-muted d-block">Duration</small>
                            <strong>${trip.duration || 'N/A'} days</strong>
                        </div>
                        <div class="col-6">
                            <small class="text-muted d-block">Budget</small>
                            <strong>$${trip.total ? trip.total.toLocaleString() : 'N/A'}</strong>
                        </div>
                    </div>
                </div>

                <div class="mt-3">
                    <button class="btn btn-primary w-100 view-pdf-btn" data-trip-id="${trip.id}">
                        <i class="fa-solid fa-eye me-2"></i>View PDF
                    </button>
                </div>
            </div>
        </div>
    `;

    return col;
}

async function viewPdf(tripId) {
    try {
        if (window.OfflineManager) {
            const pdfData = await window.OfflineManager.getTripPdf(tripId);
            if (pdfData) {
                // Convert base64 to blob for PDF
                const byteCharacters = atob(pdfData);
                const byteNumbers = new Array(byteCharacters.length);
                for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                const byteArray = new Uint8Array(byteNumbers);
                const blob = new Blob([byteArray], { type: 'application/pdf' });
                const url = URL.createObjectURL(blob);

                // Open in new window/tab
                window.open(url, '_blank');
            } else {
                throw new Error('PDF not found');
            }
        }
    } catch (error) {
        console.error('Error viewing PDF:', error);
        showToast('Failed to open PDF', 'error');
    }
}

async function downloadPdf(tripId) {
    try {
        if (window.OfflineManager) {
            const pdfData = await window.OfflineManager.getTripPdf(tripId);
            if (pdfData) {
                // Convert base64 to blob for PDF
                const byteCharacters = atob(pdfData);
                const byteNumbers = new Array(byteCharacters.length);
                for (let i = 0; i < byteCharacters.length; i++) {
                    byteNumbers[i] = byteCharacters.charCodeAt(i);
                }
                const byteArray = new Uint8Array(byteNumbers);
                const blob = new Blob([byteArray], { type: 'application/pdf' });
                const url = URL.createObjectURL(blob);
                const a = document.createElement('a');
                a.href = url;
                a.download = `trip-${tripId}.pdf`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                URL.revokeObjectURL(url);

                showToast('PDF downloaded successfully', 'success');
            } else {
                throw new Error('PDF not found');
            }
        }
    } catch (error) {
        console.error('Error downloading PDF:', error);
        showToast('Failed to download PDF', 'error');
    }
}

async function deletePdf(tripId) {
    if (confirm('Are you sure you want to delete this downloaded trip?')) {
        try {
            if (window.OfflineManager) {
                await window.OfflineManager.removeOfflineTrip(tripId);
                showToast('Trip deleted successfully', 'success');
                loadOfflineTrips(); // Refresh the list
            }
        } catch (error) {
            console.error('Error deleting PDF:', error);
            showToast('Failed to delete trip', 'error');
        }
    }
}

async function syncOfflineChanges() {
    try {
        showToast('Syncing changes...', 'info');

        // Here you could implement syncing logic with the server
        // For now, just show success
        setTimeout(() => {
            showToast('Changes synced successfully', 'success');
        }, 1000);
    } catch (error) {
        console.error('Error syncing:', error);
        showToast('Failed to sync changes', 'error');
    }
}

// Toast notification function
function showToast(message, type) {
    const toast = document.createElement('div');
    toast.className = `alert alert-${type === 'success' ? 'success' : 'error' ? 'danger' : 'info' ? 'info' : 'warning'} position-fixed`;
    toast.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
    toast.innerHTML = `<i class="fa-solid fa-${type === 'success' ? 'check' : type === 'error' ? 'times' : type === 'info' ? 'info' : 'exclamation'}-circle me-2"></i>${message}`;
    document.body.appendChild(toast);

    setTimeout(() => {
        toast.remove();
    }, 3000);
}
</script>
