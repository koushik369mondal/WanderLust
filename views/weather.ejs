<% layout('/layouts/boilerplate') %>

<style>
/* Weather Page Hero Section */
.weather-hero {
  background: linear-gradient(135deg, var(--bg-primary-solid), rgba(254, 66, 77, 0.1));
  backdrop-filter: blur(15px);
  color: var(--text-primary);
  padding: 4rem 0;
  text-align: center;
  margin-bottom: 2rem;
  border-radius: 0 0 30px 30px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  position: relative;
  overflow: hidden;
}

.weather-hero::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url('/images/beach.jpg') no-repeat center center;
  background-size: cover;
  opacity: 0.1;
  z-index: -1;
}

.weather-hero h1 {
  font-size: 3rem;
  font-weight: 700;
  margin-bottom: 1rem;
  background: linear-gradient(135deg, var(--accent-color), #ff6b6b);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.weather-hero p {
  font-size: 1.2rem;
  opacity: 0.9;
  margin-bottom: 2rem;
}

/* Destination Dropdown and Controls */
.weather-controls {
  max-width: 800px;
  margin: 0 auto 2rem;
  display: flex;
  flex-direction: column;
  gap: 1rem;
  align-items: center;
}

.weather-controls-row {
  display: flex;
  gap: 1rem;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
}

.weather-destination-dropdown {
  min-width: 250px;
  flex: 1;
  max-width: 300px;
}

.weather-destination-select {
  width: 100%;
  padding: 0.75rem 1rem;
  border: 2px solid var(--border-color);
  border-radius: 15px;
  background: rgba(255, 255, 255, 0.9);
  backdrop-filter: blur(10px);
  color: var(--text-primary);
  font-size: 1rem;
  box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
  outline: none;
  transition: all 0.3s ease;
}

.weather-destination-select:focus {
  border-color: var(--accent-color);
  box-shadow: 0 0 0 0.25rem rgba(254, 66, 77, 0.15);
  transform: translateY(-2px);
}

.weather-destination-select option {
  background: var(--bg-primary);
  color: var(--text-primary);
}

.weather-refresh-btn {
  background: linear-gradient(135deg, var(--accent-color), #ff6b6b);
  color: white;
  border: none;
  border-radius: 15px;
  padding: 0.75rem 1.5rem;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(254, 66, 77, 0.3);
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.weather-refresh-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(254, 66, 77, 0.4);
  background: linear-gradient(135deg, #d63641, #e55555);
}

.weather-refresh-btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  transform: none;
}

.weather-last-updated {
  font-size: 0.9rem;
  color: var(--text-secondary);
  font-weight: 500;
  margin-top: 0.5rem;
}

/* Search Container */
.weather-search-container {
  max-width: 600px;
  margin: 0 auto;
  position: relative;
}

.weather-search-input {
  width: 100%;
  padding: 1rem 3rem 1rem 1rem;
  border: 2px solid var(--border-color);
  border-radius: 50px;
  font-size: 1.1rem;
  background: rgba(255, 255, 255, 0.9);
  backdrop-filter: blur(10px);
  color: var(--text-primary);
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
  outline: none;
  transition: all 0.3s ease;
}

.weather-search-input:focus {
  border-color: var(--accent-color);
  box-shadow: 0 0 0 0.25rem rgba(254, 66, 77, 0.15);
  transform: translateY(-2px);
}

.weather-search-input::placeholder {
  color: var(--text-secondary);
}

.weather-search-btn {
  position: absolute;
  right: 10px;
  top: 50%;
  transform: translateY(-50%);
  background: linear-gradient(135deg, var(--accent-color), #ff6b6b);
  color: white;
  border: none;
  border-radius: 50%;
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(254, 66, 77, 0.3);
}

.weather-search-btn:hover {
  transform: translateY(-50%) scale(1.1);
  box-shadow: 0 6px 20px rgba(254, 66, 77, 0.4);
}

/* Weather Results Container */
.weather-results {
  display: none;
  margin-top: 2rem;
}

/* Main Weather Card */
.weather-main-card {
  background: var(--bg-primary-solid);
  backdrop-filter: blur(20px);
  border-radius: 30px;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.15);
  overflow: hidden;
  margin-bottom: 2rem;
  border: 1px solid var(--border-color);
  transition: all 0.3s ease;
}

.weather-main-card:hover {
  transform: translateY(-5px);
  box-shadow: 0 25px 70px rgba(0, 0, 0, 0.2);
}

/* Weather Header */
.weather-header {
  background: linear-gradient(135deg, var(--accent-color), #ff6b6b);
  color: white;
  padding: 2rem;
  text-align: center;
  position: relative;
  overflow: hidden;
}

.weather-header::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url('/images/beach.jpg') no-repeat center center;
  background-size: cover;
  opacity: 0.2;
  z-index: -1;
}

.weather-location {
  font-size: 2.5rem;
  font-weight: 700;
  margin-bottom: 0.5rem;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

.weather-country {
  font-size: 1.2rem;
  opacity: 0.9;
  font-weight: 500;
}

/* Current Weather Section */
.weather-current {
  padding: 3rem 2rem;
  text-align: center;
  background: linear-gradient(135deg, rgba(255, 255, 255, 0.1), rgba(254, 66, 77, 0.05));
  position: relative;
}

.weather-temp {
  font-size: 5rem;
  font-weight: 300;
  color: var(--text-primary);
  margin-bottom: 1rem;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
}

.weather-condition {
  font-size: 1.8rem;
  color: var(--text-secondary);
  margin-bottom: 2rem;
  text-transform: capitalize;
  font-weight: 500;
}

.weather-icon-large {
  font-size: 6rem;
  margin: 1rem 0;
  filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2));
}

/* Weather Details Grid */
.weather-details {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
  gap: 2rem;
  margin-top: 3rem;
}

.weather-detail-item {
  background: rgba(255, 255, 255, 0.1);
  backdrop-filter: blur(10px);
  padding: 2rem 1.5rem;
  border-radius: 20px;
  text-align: center;
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(255, 255, 255, 0.2);
  transition: all 0.3s ease;
}

.weather-detail-item:hover {
  transform: translateY(-5px);
  box-shadow: 0 12px 35px rgba(0, 0, 0, 0.15);
  background: rgba(255, 255, 255, 0.15);
}

.weather-detail-label {
  font-size: 1rem;
  color: var(--text-secondary);
  margin-bottom: 1rem;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  font-weight: 600;
}

.weather-detail-value {
  font-size: 1.8rem;
  font-weight: 700;
  color: var(--text-primary);
}

/* Forecast Section */
.weather-forecast {
  margin-top: 3rem;
}

.weather-forecast-title {
  text-align: center;
  font-size: 2.2rem;
  margin-bottom: 2rem;
  color: var(--text-primary);
  font-weight: 700;
  background: linear-gradient(135deg, var(--accent-color), #ff6b6b);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.forecast-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
  gap: 1.5rem;
}

.forecast-item {
  background: var(--bg-primary-solid);
  backdrop-filter: blur(15px);
  padding: 1.5rem 1rem;
  border-radius: 20px;
  text-align: center;
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  border: 1px solid var(--border-color);
  transition: all 0.3s ease;
}

.forecast-item:hover {
  transform: translateY(-3px);
  box-shadow: 0 12px 35px rgba(0, 0, 0, 0.15);
}

.forecast-date {
  font-size: 1rem;
  color: var(--text-secondary);
  margin-bottom: 0.5rem;
  font-weight: 600;
}

.forecast-icon {
  font-size: 2.5rem;
  margin: 0.5rem 0;
}

.forecast-temp {
  font-size: 1.5rem;
  font-weight: 700;
  color: var(--text-primary);
  margin-bottom: 0.5rem;
}

.forecast-condition {
  font-size: 0.9rem;
  color: var(--text-secondary);
  text-transform: capitalize;
  font-weight: 500;
}

/* Best Time to Visit */
.weather-best-time {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  padding: 3rem 2rem;
  border-radius: 30px;
  text-align: center;
  margin-top: 3rem;
  box-shadow: 0 15px 40px rgba(102, 126, 234, 0.3);
  position: relative;
  overflow: hidden;
}

.weather-best-time::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: url('/images/beach.jpg') no-repeat center center;
  background-size: cover;
  opacity: 0.1;
  z-index: -1;
}

.weather-best-time h4 {
  font-size: 2rem;
  font-weight: 700;
  margin-bottom: 1rem;
  text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
}

.weather-best-time p {
  font-size: 1.2rem;
  opacity: 0.9;
  font-weight: 500;
}

/* Loading and Error States */
.weather-loading {
  text-align: center;
  padding: 4rem 2rem;
  background: var(--bg-primary-solid);
  backdrop-filter: blur(15px);
  border-radius: 30px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  border: 1px solid var(--border-color);
}

.weather-spinner {
  width: 60px;
  height: 60px;
  border: 4px solid rgba(254, 66, 77, 0.2);
  border-top: 4px solid var(--accent-color);
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin: 0 auto 2rem;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

.weather-loading h4 {
  color: var(--text-primary);
  font-weight: 600;
  margin-bottom: 1rem;
}

.weather-loading p {
  color: var(--text-secondary);
  font-size: 1.1rem;
}

.weather-error {
  text-align: center;
  padding: 4rem 2rem;
  background: var(--bg-primary-solid);
  backdrop-filter: blur(15px);
  border-radius: 30px;
  box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  border: 1px solid var(--border-color);
}

.weather-error i {
  font-size: 4rem;
  color: var(--accent-color);
  margin-bottom: 1.5rem;
  filter: drop-shadow(0 4px 8px rgba(254, 66, 77, 0.3));
}

.weather-error h4 {
  color: var(--text-primary);
  font-weight: 600;
  margin-bottom: 1rem;
}

.weather-error p {
  color: var(--text-secondary);
  font-size: 1.1rem;
}

/* Responsive Design */
@media (max-width: 768px) {
  .weather-hero {
    padding: 3rem 1rem;
  }

  .weather-hero h1 {
    font-size: 2.5rem;
  }

  .weather-hero p {
    font-size: 1.1rem;
  }

  .weather-controls-row {
    flex-direction: column;
    gap: 1rem;
  }

  .weather-destination-dropdown {
    min-width: 100%;
    max-width: none;
  }

  .weather-temp {
    font-size: 4rem;
  }

  .weather-location {
    font-size: 2rem;
  }

  .weather-details {
    grid-template-columns: repeat(2, 1fr);
    gap: 1.5rem;
  }

  .forecast-grid {
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
  }

  .forecast-item {
    padding: 1rem 0.5rem;
  }

  .weather-best-time {
    padding: 2rem 1.5rem;
  }

  .weather-best-time h4 {
    font-size: 1.8rem;
  }
}

@media (max-width: 480px) {
  .weather-hero h1 {
    font-size: 2rem;
  }

  .weather-temp {
    font-size: 3rem;
  }

  .weather-details {
    grid-template-columns: 1fr;
  }

  .forecast-grid {
    grid-template-columns: repeat(2, 1fr);
  }
}

/* Dark theme adjustments */
[data-theme="dark"] .weather-hero {
  background: linear-gradient(135deg, var(--bg-primary-solid), rgba(254, 66, 77, 0.1));
}

[data-theme="dark"] .weather-search-input,
[data-theme="dark"] .weather-destination-select {
  background: rgba(0, 0, 0, 0.3);
  border-color: var(--border-color);
  color: var(--text-primary);
}

[data-theme="dark"] .weather-main-card,
[data-theme="dark"] .weather-loading,
[data-theme="dark"] .weather-error,
[data-theme="dark"] .forecast-item {
  background: var(--bg-primary-solid);
  border-color: var(--border-color);
}

[data-theme="dark"] .weather-current {
  background: linear-gradient(135deg, rgba(0, 0, 0, 0.1), rgba(254, 66, 77, 0.05));
}

[data-theme="dark"] .weather-detail-item {
  background: rgba(0, 0, 0, 0.2);
  border-color: rgba(255, 255, 255, 0.1);
}
</style>

<div class="weather-hero">
  <div class="container">
    <h1><i class="fa-solid fa-cloud-sun me-2"></i>Weather Information</h1>
    <p class="lead">Get detailed weather information for any location worldwide</p>

    <!-- Destination Controls -->
    <div class="weather-controls">
      <div class="weather-controls-row">
        <div class="weather-destination-dropdown">
          <select id="destinationSelect" class="weather-destination-select">
            <option value="">Select a destination...</option>
            <% if (typeof destinations !== 'undefined' && destinations.length > 0) { %>
              <% destinations.forEach(destination => { %>
                <option value="<%= destination %>"><%= destination %></option>
              <% }); %>
            <% } %>
          </select>
        </div>
        <button id="refreshBtn" class="weather-refresh-btn" disabled>
          <i class="fa-solid fa-refresh"></i>
          Refresh
        </button>
      </div>
      <div id="lastUpdated" class="weather-last-updated" style="display: none;">
        Last updated: <span id="lastUpdatedTime"></span>
      </div>
    </div>

    <!-- Search Container -->
    <div class="weather-search-container">
      <input type="text" id="weatherSearchInput" class="weather-search-input"
             placeholder="Or enter city name manually (e.g., Paris, Tokyo, New York)">
      <button id="weatherSearchBtn" class="weather-search-btn">
        <i class="fa-solid fa-search"></i>
      </button>
    </div>
  </div>
</div>

<div class="container">
  <!-- Loading State -->
  <div id="weatherLoading" class="weather-loading" style="display: none;">
    <div class="weather-spinner"></div>
    <h4>Loading weather data...</h4>
    <p>Please wait while we fetch the latest information</p>
  </div>

  <!-- Error State -->
  <div id="weatherError" class="weather-error" style="display: none;">
    <i class="fa-solid fa-exclamation-triangle"></i>
    <h4>Weather data unavailable</h4>
    <p id="errorMessage">Unable to fetch weather information. Please try again later.</p>
  </div>

  <!-- Weather Results -->
  <div id="weatherResults" class="weather-results">
    <!-- Main Weather Card -->
    <div class="weather-main-card">
      <div class="weather-header">
        <h2 class="weather-location" id="locationName">Location</h2>
        <p class="weather-country" id="locationCountry">Country</p>
      </div>

      <div class="weather-current">
        <div class="weather-icon-large" id="currentWeatherIcon">🌤️</div>
        <div class="weather-temp" id="currentTemp">--°C</div>
        <div class="weather-condition" id="currentCondition">Loading...</div>

        <div class="weather-details">
          <div class="weather-detail-item">
            <div class="weather-detail-label">Feels Like</div>
            <div class="weather-detail-value" id="feelsLike">--°C</div>
          </div>
          <div class="weather-detail-item">
            <div class="weather-detail-label">Humidity</div>
            <div class="weather-detail-value" id="humidity">--%</div>
          </div>
          <div class="weather-detail-item">
            <div class="weather-detail-label">Wind Speed</div>
            <div class="weather-detail-value" id="windSpeed">-- km/h</div>
          </div>
          <div class="weather-detail-item">
            <div class="weather-detail-label">Visibility</div>
            <div class="weather-detail-value" id="visibility">-- km</div>
          </div>
          <div class="weather-detail-item">
            <div class="weather-detail-label">Pressure</div>
            <div class="weather-detail-value" id="pressure">-- hPa</div>
          </div>
          <div class="weather-detail-item">
            <div class="weather-detail-label">UV Index</div>
            <div class="weather-detail-value" id="uvIndex">--</div>
          </div>
        </div>
      </div>
    </div>

    <!-- 7-Day Forecast -->
    <div class="weather-forecast">
      <h3 class="weather-forecast-title">
        <i class="fa-solid fa-calendar-week me-2"></i>7-Day Forecast
      </h3>
      <div class="forecast-grid" id="forecastGrid">
        <!-- Forecast items will be populated by JavaScript -->
      </div>
    </div>

    <!-- Best Time to Visit -->
    <div class="weather-best-time">
      <i class="fa-solid fa-calendar-check fa-2x mb-3"></i>
      <h4>Best Time to Visit</h4>
      <p id="bestTimeToVisit">Loading recommendations...</p>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const destinationSelect = document.getElementById('destinationSelect');
  const refreshBtn = document.getElementById('refreshBtn');
  const lastUpdatedDiv = document.getElementById('lastUpdated');
  const lastUpdatedTime = document.getElementById('lastUpdatedTime');
  const searchInput = document.getElementById('weatherSearchInput');
  const searchBtn = document.getElementById('weatherSearchBtn');
  const loadingDiv = document.getElementById('weatherLoading');
  const errorDiv = document.getElementById('weatherError');
  const resultsDiv = document.getElementById('weatherResults');

  let currentLocation = '';
  let lastUpdateTime = null;

  // Destination selection handler
  destinationSelect.addEventListener('change', function() {
    const selectedDestination = this.value;
    if (selectedDestination) {
      currentLocation = selectedDestination;
      searchWeather(selectedDestination);
    }
  });

  // Refresh button handler
  refreshBtn.addEventListener('click', function() {
    if (currentLocation) {
      searchWeather(currentLocation);
    }
  });

  // Search functionality
  function performSearch() {
    const location = searchInput.value.trim();
    if (!location) {
      showError('Please enter a location name');
      return;
    }

    currentLocation = location;
    destinationSelect.value = ''; // Clear dropdown selection
    searchWeather(location);
  }

  // Event listeners
  searchBtn.addEventListener('click', performSearch);
  searchInput.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
      performSearch();
    }
  });

  // Search weather by location
  async function searchWeather(location) {
    try {
      showLoading();
      refreshBtn.disabled = true;

      const response = await fetch(`/weather/search/${encodeURIComponent(location)}`);
      const data = await response.json();

      if (!response.ok) {
        throw new Error(data.error || 'Failed to fetch weather data');
      }

      displayWeatherData(data);
      updateLastUpdated();
    } catch (error) {
      console.error('Weather search error:', error);
      showError(error.message || 'Unable to fetch weather data. Please try again.');
    } finally {
      refreshBtn.disabled = false;
    }
  }

  // Display weather data
  function displayWeatherData(data) {
    hideLoading();
    hideError();
    resultsDiv.style.display = 'block';

    // Update location info
    document.getElementById('locationName').textContent = data.location.name;
    document.getElementById('locationCountry').textContent = data.location.country;

    // Update current weather
    const current = data.current;
    document.getElementById('currentTemp').textContent = `${current.temperature}°C`;
    document.getElementById('currentCondition').textContent = current.description;
    document.getElementById('currentWeatherIcon').textContent = getWeatherEmoji(current.icon);

    // Update details
    document.getElementById('feelsLike').textContent = `${current.feelsLike}°C`;
    document.getElementById('humidity').textContent = `${current.humidity}%`;
    document.getElementById('windSpeed').textContent = `${(current.windSpeed * 3.6).toFixed(1)} km/h`; // Convert m/s to km/h

    // Additional details (mock data for demo - in real app, get from API)
    document.getElementById('visibility').textContent = '10+ km';
    document.getElementById('pressure').textContent = '1013 hPa';
    document.getElementById('uvIndex').textContent = 'Moderate';

    // Update forecast
    updateForecast(data.forecast);

    // Update best time to visit
    document.getElementById('bestTimeToVisit').textContent = data.bestTimeToVisit;
  }

  // Update forecast display
  function updateForecast(forecast) {
    const forecastGrid = document.getElementById('forecastGrid');
    forecastGrid.innerHTML = '';

    forecast.forEach(day => {
      const forecastItem = document.createElement('div');
      forecastItem.className = 'forecast-item';
      forecastItem.innerHTML = `
        <div class="forecast-date">${day.date}</div>
        <div class="forecast-icon">${getWeatherEmoji(day.icon)}</div>
        <div class="forecast-temp">${day.temperature}°C</div>
        <div class="forecast-condition">${day.description}</div>
      `;
      forecastGrid.appendChild(forecastItem);
    });
  }

  // Update last updated time
  function updateLastUpdated() {
    lastUpdateTime = new Date();
    const timeString = lastUpdateTime.toLocaleString();
    lastUpdatedTime.textContent = timeString;
    lastUpdatedDiv.style.display = 'block';
  }

  // Weather emoji mapping
  function getWeatherEmoji(iconCode) {
    const iconMap = {
      '01d': '☀️', '01n': '🌙',
      '02d': '⛅', '02n': '☁️',
      '03d': '☁️', '03n': '☁️',
      '04d': '☁️', '04n': '☁️',
      '09d': '🌧️', '09n': '🌧️',
      '10d': '🌦️', '10n': '🌧️',
      '11d': '⛈️', '11n': '⛈️',
      '13d': '❄️', '13n': '❄️',
      '50d': '🌫️', '50n': '🌫️'
    };
    return iconMap[iconCode] || '🌤️';
  }

  // UI state management
  function showLoading() {
    loadingDiv.style.display = 'block';
    errorDiv.style.display = 'none';
    resultsDiv.style.display = 'none';
  }

  function hideLoading() {
    loadingDiv.style.display = 'none';
  }

  function showError(message) {
    hideLoading();
    resultsDiv.style.display = 'none';
    errorDiv.style.display = 'block';
    document.getElementById('errorMessage').textContent = message;
  }

  function hideError() {
    errorDiv.style.display = 'none';
  }

  // Initialize - auto-select first destination if available
  if (destinationSelect.options.length > 1) {
    // Optionally auto-load weather for first destination
    // destinationSelect.selectedIndex = 1;
    // destinationSelect.dispatchEvent(new Event('change'));
  }
});
</script>
