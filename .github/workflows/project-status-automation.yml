name: Auto Update Project Status

on:
  issues:
    types: [opened, assigned, closed]

permissions:
  issues: write
  contents: read
  repository-projects: write

jobs:
  update-status:
    runs-on: ubuntu-latest

    steps:
      - name: Set project status based on issue event
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const issue = context.payload.issue;
            const owner = context.repo.owner;
            const repo = context.repo.repo;

            let status = "";

            if (context.payload.action === "opened") {
              status = "Todo";
            } else if (context.payload.action === "assigned") {
              status = "In Progress";
            } else if (context.payload.action === "closed") {
              status = "Done";
            }

            if (!status) {
              console.log("‚ö†Ô∏è No valid status found for action:", context.payload.action);
              return;
            }

            console.log(`üéØ Processing issue #${issue.number}: ${issue.title}`);
            console.log(`üìã Action: ${context.payload.action} ‚Üí Status: ${status}`);

            try {
              // First, try to find organization projects (GitHub Projects V2)
              console.log("üîç Searching for GitHub Projects V2...");
              
              // Get repository projects using GraphQL
              const query = `
                query($owner: String!, $repo: String!) {
                  repository(owner: $owner, name: $repo) {
                    projectsV2(first: 10) {
                      nodes {
                        id
                        title
                        number
                      }
                    }
                  }
                  organization(login: $owner) {
                    projectsV2(first: 20) {
                      nodes {
                        id
                        title
                        number
                      }
                    }
                  }
                }
              `;

              let projects = [];
              
              try {
                const result = await github.graphql(query, {
                  owner: owner,
                  repo: repo
                });
                
                // Combine repository and organization projects
                projects = [
                  ...(result.repository?.projectsV2?.nodes || []),
                  ...(result.organization?.projectsV2?.nodes || [])
                ];
                
                console.log(`üìÇ Found ${projects.length} GitHub Projects V2`);
                projects.forEach(p => console.log(`   - ${p.title} (${p.number})`));
                
              } catch (graphqlError) {
                console.log("‚ö†Ô∏è GraphQL query failed:", graphqlError.message);
              }

              // If no V2 projects found, fall back to Classic Projects
              if (projects.length === 0) {
                console.log("üîÑ Falling back to Classic Projects...");
                
                try {
                  const classicProjects = await github.rest.projects.listForRepo({
                    owner,
                    repo
                  });
                  
                  if (classicProjects.data.length > 0) {
                    console.log(`üìÇ Found ${classicProjects.data.length} Classic Project(s)`);
                    
                    const project = classicProjects.data.find(p => 
                      p.name.toLowerCase().includes("wanderlust") || 
                      p.name.toLowerCase().includes("todo") ||
                      p.name.toLowerCase().includes("kanban")
                    );
                    
                    if (project) {
                      console.log(`‚úÖ Using Classic Project: ${project.name}`);
                      await handleClassicProject(project, issue, status);
                      return;
                    }
                  }
                } catch (classicError) {
                  console.log("‚ö†Ô∏è Classic Projects API failed:", classicError.message);
                }
              }

              // Handle GitHub Projects V2
              if (projects.length > 0) {
                const targetProject = projects.find(p => 
                  p.title.toLowerCase().includes("wanderlust") || 
                  p.title.toLowerCase().includes("todo") ||
                  p.title.toLowerCase().includes("main")
                ) || projects[0]; // Use first project as fallback
                
                console.log(`‚úÖ Using Project V2: ${targetProject.title}`);
                await handleProjectV2(targetProject, issue, status);
              } else {
                console.log("‚ö†Ô∏è No projects found. Please create a GitHub Project Board.");
                console.log("üí° Go to: https://github.com/" + owner + "/" + repo + "/projects");
              }

              console.log(`üéâ Project status workflow completed for issue #${issue.number}`);

            } catch (error) {
              console.error(`‚ùå Error updating project status:`, error.message);
              console.error(`üìù Full error:`, error);
            }

            // Function to handle Classic Projects
            async function handleClassicProject(project, issue, status) {
              console.log(`üîß Handling Classic Project: ${project.name}`);
              
              const columns = await github.rest.projects.listColumns({
                project_id: project.id
              });

              console.log(`üìã Available columns:`, columns.data.map(c => c.name));

              const column = columns.data.find(c => 
                c.name.toLowerCase() === status.toLowerCase() ||
                c.name.toLowerCase().includes(status.toLowerCase())
              );
              
              if (!column) {
                console.log(`‚ö†Ô∏è Column '${status}' not found in Classic Project`);
                return;
              }

              // Search for existing card
              let issueCard = null;
              for (const col of columns.data) {
                const cards = await github.rest.projects.listCards({
                  column_id: col.id
                });
                
                const card = cards.data.find(c => 
                  c.content_url && c.content_url.includes(`/issues/${issue.number}`)
                );
                
                if (card) {
                  issueCard = card;
                  break;
                }
              }

              if (issueCard) {
                await github.rest.projects.moveCard({
                  card_id: issueCard.id,
                  position: "top",
                  column_id: column.id
                });
                console.log(`‚úÖ Moved issue #${issue.number} to '${status}' column`);
              } else {
                await github.rest.projects.createCard({
                  column_id: column.id,
                  content_id: issue.id,
                  content_type: "Issue"
                });
                console.log(`‚úÖ Created new card for issue #${issue.number}`);
              }
            }

            // Function to handle GitHub Projects V2
            async function handleProjectV2(project, issue, status) {
              console.log(`üîß Handling Project V2: ${project.title}`);
              
              // Add issue to project V2 using GraphQL
              const addItemMutation = `
                mutation($projectId: ID!, $contentId: ID!) {
                  addProjectV2ItemByContentId(input: {
                    projectId: $projectId
                    contentId: $contentId
                  }) {
                    item {
                      id
                    }
                  }
                }
              `;

              try {
                const result = await github.graphql(addItemMutation, {
                  projectId: project.id,
                  contentId: issue.node_id
                });
                
                console.log(`‚úÖ Added issue #${issue.number} to Project V2: ${project.title}`);
                
                // Note: Setting status field in V2 projects requires additional GraphQL queries
                // to find the status field ID and option values, which is more complex
                console.log(`‚ÑπÔ∏è Status update for V2 projects requires manual configuration`);
                
              } catch (v2Error) {
                if (v2Error.message.includes("already exists")) {
                  console.log(`‚ÑπÔ∏è Issue #${issue.number} already exists in project`);
                } else {
                  console.log(`‚ö†Ô∏è Error adding to Project V2:`, v2Error.message);
                }
              }
            }